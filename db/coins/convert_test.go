package coins_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/33cn/externaldb/db"
	"github.com/33cn/externaldb/db/account"
	"github.com/33cn/externaldb/db/coins"
	"github.com/33cn/externaldb/db/transaction"
	"github.com/33cn/externaldb/util"
)

func init() {
	util.InitChain33("local", "bty", "../../testdata/chain33.toml")
}

// transfer withdraw transferToExec
// transfer 测试基本功能
// withdraw transferToExec 额外测试
func Test_ConvertTx(t *testing.T) {
	blockByte := "0aea071220cb6810299957802da8ebd0e18dc900ba5a3d6746352b42d703f11cf88c3f9d5c1a20bbdb455fd1674c3540b2c3cab944c625716331e74fc0e02f3cd519e363a17d962220e13c5d5f04761e59ffb554730e9bc353c47f8710c89b788b1dde3f33c74d4d3d28ab9dae0130b6d3e6e9053a90050a067469636b657412e403501022df0308d3de83f1011080cab5ee011ac4013145776b4b6439695531704c325a776d524143355272426f71464431614d7251323a3078316435663362393337386264666634346565313761356136363135343965613263623230383032386436633539636139313064336430383636366436333533353a303030303030303030303a323162356138653336366332646330383439663134383937303433333730643338656130613033393236356263323464396438616133646664343238646632663a3135363239363638303937383134343331313922423078643464643230623737373537336239343464613936376162326333613365666535333866326136313638326537353430306264623931623865336232616362622a20c30eb9a29a6b64a325efb6934a296207f80957221612bf73ededb47b4fa586ad3220714788f458028a1de087d7c258787cdb5b1e8a415ec3ac5dfcfaed1e21fae2c83a81011bb60bc2363a1a66d91ce10d6e374951b03f12f282fe7c51db3fd76ae9aee41eaffff651a4f271a52544983eeeab747a65205dbf67a24214d816bb111a4ebdd604d5dab2d232820d3e2b4ecf916e073a53071ed38a530fe2373f6f7630fb76d99725d824061a794176279b3cdbd9cbb070f6ac0a132d8c84e7ec920d89950be8b61a6d0801122103ee1171e51abe4d3dbd8b9a076d601663ad3f3f2f4f98d517d1f0c410a1fdd5b61a4630440220362018642640206432751187a19a090e2018122b05d33b8d2a4b53aca005ee440220418680ce93ee0f151d6813f1e942de1c804351eddfb4da7c9052701ce777ff5020a08d0630ade2bed7c397e9a5603a22313668747663424e53454137665a6841644c4a706844775152514a614870794854703ab6010a05636f696e73120b18010a071080f8dcf8c60e1a6e0801122102dd9744936ea82d4309b47e007456deb4ed4de77cec3ae2b155f86f8c9b503d8d1a473045022100d510ab5e2a989ea7d36382f07fd6e76c880625883ecd7c64891e505901896fbc02200b940f9d1608fca12530a1054b13b60726ba80873900d8d0f6c79a8db723decf20a08d0630adecb69efff4e8e1633a2231374a4745764445424569676a6f6f5a62646d746878615364384b6a35324265746558d3de83f1016220cab08f4999c4a0b43d97a06dfca66739b6d0ebb368777b93a38740e053f369e568ab9dae0112cc0608021a5c080212580a2a10bbb8bcebea0222213145776b4b6439695531704c325a776d524143355272426f71464431614d725132122a109babb6ebea0222213145776b4b6439695531704c325a776d524143355272426f71464431614d7251321af301087112ee010ac4013145776b4b6439695531704c325a776d524143355272426f71464431614d7251323a3078316435663362393337386264666634346565313761356136363135343965613263623230383032386436633539636139313064336430383636366436333533353a303030303030303030303a323162356138653336366332646330383439663134383937303433333730643338656130613033393236356263323464396438616133646664343238646632663a313536323936363830393738313434333131391002180122213145776b4b6439695531704c325a776d524143355272426f71464431614d7251321a620805125e0a2d10cdff80db98fdb8432222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d10cdc9b6c99afdb8432222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a93010808128e010a22313668747663424e53454137665a6841644c4a706844775152514a61487079485470123310808a87d0251880b482a9edeb9d04222231457852524c6f4a5861384c7a58644e786e4a76426b564e5a7056773351574d69341a3310808a87d0251880feb797efeb9d04222231457852524c6f4a5861384c7a58644e786e4a76426b564e5a7056773351574d69341a620805125e0a2d10cdc9b6c99afdb8432222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d10cd8fbdd89bfdb8432222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a950108081290010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012341080c0958fc7d6e2041880bac89efa7f2222314a6d46614136756e724346594557504752693775755859314b7468544a784a45501a341080c0958fc7d6e204188080cfadfb7f2222314a6d46614136756e724346594557504752693775755859314b7468544a784a455012a60208021a600802125c0a2c10db88d09eccc16c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f69122c10bbfbc99eccc16c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f691a600803125c0a2c10bbfbc99eccc16c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f69122c10bb83eda585b36c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f691a5e0803125a0a2b10fbdfb5acfd1d222231374a4745764445424569676a6f6f5a62646d746878615364384b6a353242657465122b10fbd792a5c42c222231374a4745764445424569676a6f6f5a62646d746878615364384b6a353242657465"
	index := int64(1)
	env, err := util.GenEnv(blockByte, index)
	assert.Nil(t, err)

	convert := coins.NewConvert("", "bty", []string{})
	records, err := convert.ConvertTx(env, db.SeqTypeAdd)
	assert.Nil(t, err)
	assert.Equal(t, 4, len(records))

	record, ok := records[0].(*transaction.TxRecord)
	assert.True(t, ok)
	assert.Equal(t, db.OpAdd, record.Op.OpType())
	assert.Equal(t, "transaction/transaction/0x531c8d8214e384e314136cf8f70fc6e1dd936887110075d5bd6a966a056953ab", record.Key())
	tx := `{"height_index":285457100001,"height":2854571,"block_time":1564060086,"block_hash":"0xf355d454da413f4c8932a7c8ccc24076e3186a0ec4beb2a7ddd0587e61b2c948","success":true,"index":1,"hash":"0x531c8d8214e384e314136cf8f70fc6e1dd936887110075d5bd6a966a056953ab","from":"1FCX9XJTZXvZteagTrefJEBPZMt8BFmdoi","to":"17JGEvDEBEigjooZbdmthxaSd8Kj52Bete","execer":"coins","amount":500080000000,"fee":100000,"action_name":"transfer","group_count":0,"is_withdraw":false,"options":null,"assets":[{"exec":"coins","symbol":"BTY","amount":500080000000}],"next":"","is_para":false}`
	assert.Equal(t, tx, string(record.Value()))
	//t.Log(string(record.Value()))
	//assert.False(t, ok)
}

func Test_ConvertAll(t *testing.T) {
	blockByte := "0aea071220cb6810299957802da8ebd0e18dc900ba5a3d6746352b42d703f11cf88c3f9d5c1a20bbdb455fd1674c3540b2c3cab944c625716331e74fc0e02f3cd519e363a17d962220e13c5d5f04761e59ffb554730e9bc353c47f8710c89b788b1dde3f33c74d4d3d28ab9dae0130b6d3e6e9053a90050a067469636b657412e403501022df0308d3de83f1011080cab5ee011ac4013145776b4b6439695531704c325a776d524143355272426f71464431614d7251323a3078316435663362393337386264666634346565313761356136363135343965613263623230383032386436633539636139313064336430383636366436333533353a303030303030303030303a323162356138653336366332646330383439663134383937303433333730643338656130613033393236356263323464396438616133646664343238646632663a3135363239363638303937383134343331313922423078643464643230623737373537336239343464613936376162326333613365666535333866326136313638326537353430306264623931623865336232616362622a20c30eb9a29a6b64a325efb6934a296207f80957221612bf73ededb47b4fa586ad3220714788f458028a1de087d7c258787cdb5b1e8a415ec3ac5dfcfaed1e21fae2c83a81011bb60bc2363a1a66d91ce10d6e374951b03f12f282fe7c51db3fd76ae9aee41eaffff651a4f271a52544983eeeab747a65205dbf67a24214d816bb111a4ebdd604d5dab2d232820d3e2b4ecf916e073a53071ed38a530fe2373f6f7630fb76d99725d824061a794176279b3cdbd9cbb070f6ac0a132d8c84e7ec920d89950be8b61a6d0801122103ee1171e51abe4d3dbd8b9a076d601663ad3f3f2f4f98d517d1f0c410a1fdd5b61a4630440220362018642640206432751187a19a090e2018122b05d33b8d2a4b53aca005ee440220418680ce93ee0f151d6813f1e942de1c804351eddfb4da7c9052701ce777ff5020a08d0630ade2bed7c397e9a5603a22313668747663424e53454137665a6841644c4a706844775152514a614870794854703ab6010a05636f696e73120b18010a071080f8dcf8c60e1a6e0801122102dd9744936ea82d4309b47e007456deb4ed4de77cec3ae2b155f86f8c9b503d8d1a473045022100d510ab5e2a989ea7d36382f07fd6e76c880625883ecd7c64891e505901896fbc02200b940f9d1608fca12530a1054b13b60726ba80873900d8d0f6c79a8db723decf20a08d0630adecb69efff4e8e1633a2231374a4745764445424569676a6f6f5a62646d746878615364384b6a35324265746558d3de83f1016220cab08f4999c4a0b43d97a06dfca66739b6d0ebb368777b93a38740e053f369e568ab9dae0112cc0608021a5c080212580a2a10bbb8bcebea0222213145776b4b6439695531704c325a776d524143355272426f71464431614d725132122a109babb6ebea0222213145776b4b6439695531704c325a776d524143355272426f71464431614d7251321af301087112ee010ac4013145776b4b6439695531704c325a776d524143355272426f71464431614d7251323a3078316435663362393337386264666634346565313761356136363135343965613263623230383032386436633539636139313064336430383636366436333533353a303030303030303030303a323162356138653336366332646330383439663134383937303433333730643338656130613033393236356263323464396438616133646664343238646632663a313536323936363830393738313434333131391002180122213145776b4b6439695531704c325a776d524143355272426f71464431614d7251321a620805125e0a2d10cdff80db98fdb8432222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d10cdc9b6c99afdb8432222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a93010808128e010a22313668747663424e53454137665a6841644c4a706844775152514a61487079485470123310808a87d0251880b482a9edeb9d04222231457852524c6f4a5861384c7a58644e786e4a76426b564e5a7056773351574d69341a3310808a87d0251880feb797efeb9d04222231457852524c6f4a5861384c7a58644e786e4a76426b564e5a7056773351574d69341a620805125e0a2d10cdc9b6c99afdb8432222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d10cd8fbdd89bfdb8432222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a950108081290010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012341080c0958fc7d6e2041880bac89efa7f2222314a6d46614136756e724346594557504752693775755859314b7468544a784a45501a341080c0958fc7d6e204188080cfadfb7f2222314a6d46614136756e724346594557504752693775755859314b7468544a784a455012a60208021a600802125c0a2c10db88d09eccc16c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f69122c10bbfbc99eccc16c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f691a600803125c0a2c10bbfbc99eccc16c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f69122c10bb83eda585b36c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f691a5e0803125a0a2b10fbdfb5acfd1d222231374a4745764445424569676a6f6f5a62646d746878615364384b6a353242657465122b10fbd792a5c42c222231374a4745764445424569676a6f6f5a62646d746878615364384b6a353242657465"
	index := int64(1)
	env, err := util.GenEnv(blockByte, index)
	assert.Nil(t, err)

	convert := coins.NewConvert("", "bty", []string{})
	records, err := convert.ConvertTx(env, db.SeqTypeAdd)
	assert.Nil(t, err)
	assert.Equal(t, 4, len(records))
}

func Test_ConvertAccount(t *testing.T) {
	blockByte := "0aea071220cb6810299957802da8ebd0e18dc900ba5a3d6746352b42d703f11cf88c3f9d5c1a20bbdb455fd1674c3540b2c3cab944c625716331e74fc0e02f3cd519e363a17d962220e13c5d5f04761e59ffb554730e9bc353c47f8710c89b788b1dde3f33c74d4d3d28ab9dae0130b6d3e6e9053a90050a067469636b657412e403501022df0308d3de83f1011080cab5ee011ac4013145776b4b6439695531704c325a776d524143355272426f71464431614d7251323a3078316435663362393337386264666634346565313761356136363135343965613263623230383032386436633539636139313064336430383636366436333533353a303030303030303030303a323162356138653336366332646330383439663134383937303433333730643338656130613033393236356263323464396438616133646664343238646632663a3135363239363638303937383134343331313922423078643464643230623737373537336239343464613936376162326333613365666535333866326136313638326537353430306264623931623865336232616362622a20c30eb9a29a6b64a325efb6934a296207f80957221612bf73ededb47b4fa586ad3220714788f458028a1de087d7c258787cdb5b1e8a415ec3ac5dfcfaed1e21fae2c83a81011bb60bc2363a1a66d91ce10d6e374951b03f12f282fe7c51db3fd76ae9aee41eaffff651a4f271a52544983eeeab747a65205dbf67a24214d816bb111a4ebdd604d5dab2d232820d3e2b4ecf916e073a53071ed38a530fe2373f6f7630fb76d99725d824061a794176279b3cdbd9cbb070f6ac0a132d8c84e7ec920d89950be8b61a6d0801122103ee1171e51abe4d3dbd8b9a076d601663ad3f3f2f4f98d517d1f0c410a1fdd5b61a4630440220362018642640206432751187a19a090e2018122b05d33b8d2a4b53aca005ee440220418680ce93ee0f151d6813f1e942de1c804351eddfb4da7c9052701ce777ff5020a08d0630ade2bed7c397e9a5603a22313668747663424e53454137665a6841644c4a706844775152514a614870794854703ab6010a05636f696e73120b18010a071080f8dcf8c60e1a6e0801122102dd9744936ea82d4309b47e007456deb4ed4de77cec3ae2b155f86f8c9b503d8d1a473045022100d510ab5e2a989ea7d36382f07fd6e76c880625883ecd7c64891e505901896fbc02200b940f9d1608fca12530a1054b13b60726ba80873900d8d0f6c79a8db723decf20a08d0630adecb69efff4e8e1633a2231374a4745764445424569676a6f6f5a62646d746878615364384b6a35324265746558d3de83f1016220cab08f4999c4a0b43d97a06dfca66739b6d0ebb368777b93a38740e053f369e568ab9dae0112cc0608021a5c080212580a2a10bbb8bcebea0222213145776b4b6439695531704c325a776d524143355272426f71464431614d725132122a109babb6ebea0222213145776b4b6439695531704c325a776d524143355272426f71464431614d7251321af301087112ee010ac4013145776b4b6439695531704c325a776d524143355272426f71464431614d7251323a3078316435663362393337386264666634346565313761356136363135343965613263623230383032386436633539636139313064336430383636366436333533353a303030303030303030303a323162356138653336366332646330383439663134383937303433333730643338656130613033393236356263323464396438616133646664343238646632663a313536323936363830393738313434333131391002180122213145776b4b6439695531704c325a776d524143355272426f71464431614d7251321a620805125e0a2d10cdff80db98fdb8432222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d10cdc9b6c99afdb8432222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a93010808128e010a22313668747663424e53454137665a6841644c4a706844775152514a61487079485470123310808a87d0251880b482a9edeb9d04222231457852524c6f4a5861384c7a58644e786e4a76426b564e5a7056773351574d69341a3310808a87d0251880feb797efeb9d04222231457852524c6f4a5861384c7a58644e786e4a76426b564e5a7056773351574d69341a620805125e0a2d10cdc9b6c99afdb8432222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d10cd8fbdd89bfdb8432222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a950108081290010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012341080c0958fc7d6e2041880bac89efa7f2222314a6d46614136756e724346594557504752693775755859314b7468544a784a45501a341080c0958fc7d6e204188080cfadfb7f2222314a6d46614136756e724346594557504752693775755859314b7468544a784a455012a60208021a600802125c0a2c10db88d09eccc16c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f69122c10bbfbc99eccc16c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f691a600803125c0a2c10bbfbc99eccc16c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f69122c10bb83eda585b36c22223146435839584a545a58765a74656167547265664a4542505a4d743842466d646f691a5e0803125a0a2b10fbdfb5acfd1d222231374a4745764445424569676a6f6f5a62646d746878615364384b6a353242657465122b10fbd792a5c42c222231374a4745764445424569676a6f6f5a62646d746878615364384b6a353242657465"
	index := int64(1)
	env, err := util.GenEnv(blockByte, index)
	assert.Nil(t, err)

	convert := coins.NewConvert("", "bty", []string{account.RAccountX})
	records, err := convert.ConvertTx(env, db.SeqTypeAdd)
	assert.Nil(t, err)
	assert.Equal(t, 4, len(records))

	acc1 := `{"address":"1FCX9XJTZXvZteagTrefJEBPZMt8BFmdoi","exec":"","frozen":0,"balance":477242871414203,"total":477242871414203,"type":"personage","height_index":285457100001,"asset_symbol":"bty","asset_exec":"coins"}`
	acc2 := `{"address":"1FCX9XJTZXvZteagTrefJEBPZMt8BFmdoi","exec":"","frozen":0,"balance":476742791414203,"total":476742791414203,"type":"personage","height_index":285457100001,"asset_symbol":"bty","asset_exec":"coins"}`
	acc3 := `{"address":"17JGEvDEBEigjooZbdmthxaSd8Kj52Bete","exec":"","frozen":0,"balance":1530159999995,"total":1530159999995,"type":"personage","height_index":285457100001,"asset_symbol":"bty","asset_exec":"coins"}`

	record1, ok := records[1].(*account.Record)
	assert.True(t, ok)
	record2, ok := records[2].(*account.Record)
	assert.True(t, ok)
	record3, ok := records[3].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, db.OpAdd, record1.Op.OpType())
	assert.Equal(t, "account/account/1FCX9XJTZXvZteagTrefJEBPZMt8BFmdoi-coins-coins:bty", record1.Key())
	assert.Equal(t, acc1, string(record1.Value()))
	assert.Equal(t, acc2, string(record2.Value()))
	assert.Equal(t, acc3, string(record3.Value()))
	for _, r := range records {
		t.Log(string(r.Value()))
	}
}

func Test_ConvertWithdraw(t *testing.T) {
	//account.Init([]string{"16htvcBNSEA7fZhAdLJphDwQRQJaHpyHTp"})
	account.AddExecAddress("16htvcBNSEA7fZhAdLJphDwQRQJaHpyHTp")
	blockByte := "0aa8081220b3f58442c1e2c3e213204dc4650b01d40d94703fa8aacfeda2fcdbe37322d89d1a2040bbe1352380c26091cccf5067880e2eaa24be91893362adf304bef36f8d29c222204960e8599aebe4eac50cbb2f6efc63f8f010879924942c9d51a357b2cfcef3e828c9fbb40130cfe088ea053a91050a067469636b657412e503501022e003088bd48df1011080cab5ee011ac501314d6f456e434468585a36517635664e4447596f57364d56454254424b36324850323a3078383662616461393330633933666134313436353737323962393666633237353935623137333336363839323936313831353764336539306163363037623264383a303030303030303030323a643132613462316336633035376266623538323732386137376233353138666333383964386533646234643566616663646135656161633261666563646363333a3135363431353836383233313936383331333922423078343930653132386563393435373734646562343039616464643034393432653461336138396632613263643863643964396631613333363466666666313534382a20908df045fab5bfae21e497c6950339540a50e03951a10f2d42087a40379f51a53220f3430a91d54c4d357c4c7956ddbdf41212471bfb71ef60c4fe4229100c15f2283a8101a5dbaba6c7e458923e703632b00f82018aebb40b6b8187f54847746bc9e048813660db309c66e091b39d953bf38803498a13d5757faaf30d8a5842fcf865f3f6049d5f15ca916c0d691c660bc81e14adda18f7c3508ef98d4c951a02e4c104195dad147fac2d225729cf1d153b9a24e13d1e274fb08f7bc9049c07cf1c237433581a6d080112210372a0a28100901108ced01ea8cd4271652bdb1ecf0bc5bbc33d0cf8a39f9424a51a46304402207d31ca070d3e88460ceb2012865dd4c68dd60027b7c065ee15f294c927c9374f02200462a341d3153d7869ef7d1f13a3651c5eb028a569daf95aea5bfd60682433c220a08d0630f8e8ab87dbb7c783683a22313668747663424e53454137665a6841644c4a706844775152514a614870794854703af3010a05636f696e7312431803223f1080cab5ee011a136175746f6d696e65722d3e77697468647261772a22313668747663424e53454137665a6841644c4a706844775152514a614870794854701a6d080112210215c81909174d56828d7305d50b0445c1c3ffbdfa474af7c23d1444b88d8853fd1a46304402204be1d64f2cc41f1c911d135210c9a012fe9c787beff9c6ff6ea0e3818ae5b31402203389af204ad1ad0a549d188fe192cbfa23ab88fbf48bd381ef56f8ecaae70d7c20c3ca0828bfe188ea0530bdafa0e3879bb8db763a22313668747663424e53454137665a6841644c4a706844775152514a61487079485470588bd48df10162204d942c79a16bd681e8521eab4a6ec62b71c2e83978b97a9c955fbd256324d17468c9fbb40112d20608021a5e0802125a0a2b10e8a6ada1ba012222314d6f456e434468585a36517635664e4447596f57364d56454254424b3632485032122b10c899a7a1ba012222314d6f456e434468585a36517635664e4447596f57364d56454254424b36324850321af501087112f0010ac501314d6f456e434468585a36517635664e4447596f57364d56454254424b36324850323a3078383662616461393330633933666134313436353737323962393666633237353935623137333336363839323936313831353764336539306163363037623264383a303030303030303030323a643132613462316336633035376266623538323732386137376233353138666333383964386533646234643566616663646135656161633261666563646363333a31353634313538363832333139363833313339100218012222314d6f456e434468585a36517635664e4447596f57364d56454254424b36324850321a620805125e0a2d10bbf2d1b2a1e5da432222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d10bbbc87a1a3e5da432222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a950108081290010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012341080c4caf69202188084d6c088d589062222314247395a6f4b7467553562684b4c706373726e635a3678647a4643676a725a75641a341080c4caf692021880ce8baf8ad589062222314247395a6f4b7467553562684b4c706373726e635a3678647a4643676a725a75641a620805125e0a2d10bbbc87a1a3e5da432222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d10bb828eb0a4e5da432222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a950108081290010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012341080e8a383dc9aea041880c6b2f9b47f2222314a6d46614136756e724346594557504752693775755859314b7468544a784a45501a341080e8a383dc9aea0418808cb988b67f2222314a6d46614136756e724346594557504752693775755859314b7468544a784a455012ba0308021a5e0802125a0a2b10e984a4b597072222314e5051396375356f514a5170584773655756433150454b5156646d62376f317962122b10a6ba9bb597072222314e5051396375356f514a5170584773655756433150454b5156646d62376f3179621a91010807128c010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012321080f28ba80918808ae796b7dd052222314e5051396375356f514a5170584773655756433150454b5156646d62376f3179621a321080a8d6b90718808ae796b7dd052222314e5051396375356f514a5170584773655756433150454b5156646d62376f3179621a620803125e0a2d10bb828eb0a4e5da432222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d10bbb8d8c1a2e5da432222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a5e0803125a0a2b10a6ba9bb597072222314e5051396375356f514a5170584773655756433150454b5156646d62376f317962122b10a684d1a399072222314e5051396375356f514a5170584773655756433150454b5156646d62376f317962"
	index := int64(1)
	env, err := util.GenEnv(blockByte, index)

	assert.Nil(t, err)

	convert := coins.NewConvert("", "bty", []string{transaction.RTransactionX, account.RAccountX})
	records, err := convert.ConvertTx(env, db.SeqTypeAdd)
	assert.Nil(t, err)
	assert.Equal(t, 5, len(records))

	txStr := `{"height_index":296493700001,"height":2964937,"block_time":1564618831,"block_hash":"0xb1e7b23b5a41613147b1ece97511d5602ef75385f39444f7b75c3ba1ba31f9f1","success":true,"index":1,"hash":"0x86cd2683d6733c5df0f215ef629170ddc0b14edaa7f5a32e5d40418ceb1b3b6c","from":"1NPQ9cu5oQJQpXGseWVC1PEKQVdmb7o1yb","to":"16htvcBNSEA7fZhAdLJphDwQRQJaHpyHTp","execer":"coins","amount":500000000,"fee":140611,"action_name":"withdraw","group_count":0,"is_withdraw":true,"options":null,"assets":[{"exec":"coins","symbol":"BTY","amount":500000000}],"next":"","is_para":false}`
	txKey := `transaction/transaction/0x86cd2683d6733c5df0f215ef629170ddc0b14edaa7f5a32e5d40418ceb1b3b6c`
	acc1 := `{"address":"1NPQ9cu5oQJQpXGseWVC1PEKQVdmb7o1yb","exec":"","frozen":0,"balance":246803782950,"total":246803782950,"type":"personage","height_index":296493700001,"asset_symbol":"bty","asset_exec":"coins"}`
	acc2 := `{"address":"1NPQ9cu5oQJQpXGseWVC1PEKQVdmb7o1yb","exec":"16htvcBNSEA7fZhAdLJphDwQRQJaHpyHTp","frozen":25200500000000,"balance":2000000000,"total":25202500000000,"type":"contractInternal","height_index":296493700001,"asset_symbol":"bty","asset_exec":"coins"}`
	acc3 := `{"address":"16htvcBNSEA7fZhAdLJphDwQRQJaHpyHTp","exec":"","frozen":0,"balance":38116950663371835,"total":38116950663371835,"type":"contract","height_index":296493700001,"asset_symbol":"bty","asset_exec":"coins"}`
	acc4 := `{"address":"1NPQ9cu5oQJQpXGseWVC1PEKQVdmb7o1yb","exec":"","frozen":0,"balance":247303782950,"total":247303782950,"type":"personage","height_index":296493700001,"asset_symbol":"bty","asset_exec":"coins"}`
	tx, ok := records[0].(*transaction.TxRecord)
	assert.True(t, ok)
	assert.Equal(t, txStr, string(tx.Value()))
	assert.Equal(t, true, tx.Tx.IsWithdraw)
	assert.Equal(t, txKey, tx.Key())

	feeAcc, ok := records[1].(*account.Record)
	assert.True(t, ok)
	internal, ok := records[2].(*account.Record)
	assert.True(t, ok)
	record3, ok := records[3].(*account.Record)
	assert.True(t, ok)
	record4, ok := records[4].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, db.OpAdd, internal.Op.OpType())

	assert.Equal(t, acc1, string(feeAcc.Value()))
	assert.Equal(t, acc2, string(internal.Value()))
	assert.Equal(t, "account/account/1NPQ9cu5oQJQpXGseWVC1PEKQVdmb7o1yb-16htvcBNSEA7fZhAdLJphDwQRQJaHpyHTp-coins:bty", internal.Key())
	assert.Equal(t, account.AccountContractInternal, internal.Acc.Type)
	assert.Equal(t, acc3, string(record3.Value()))
	assert.Equal(t, acc4, string(record4.Value()))
	t.Log(record4)
	for _, r := range records {
		t.Log(string(r.Value()))
	}
}

func Test_ConvertTransferToExec(t *testing.T) {
	//account.Init([]string{"16htvcBNSEA7fZhAdLJphDwQRQJaHpyHTp"})
	account.AddExecAddress("16htvcBNSEA7fZhAdLJphDwQRQJaHpyHTp")

	blockByte := ""
	index := int64(1)
	env, err := util.GenEnv(blockByte, index)
	assert.Nil(t, err)

	convert := coins.NewConvert("", "bty", []string{transaction.RTransactionX, account.RAccountX})
	records, err := convert.ConvertTx(env, db.SeqTypeAdd)
	assert.Nil(t, err)
	assert.Equal(t, 5, len(records))

	txKey := `transaction/transaction/0xdbf2ca3a9e65dec47992d9f0f4113a4f7fdfd52d460fd3a20725d47029bf91a6`
	acc1 := `{"address":"1G3HRSLPAKvKcTYW7KNhaWftgchj9HiwnV","exec":"","frozen":0,"balance":500000199700000,"total":500000199700000,"type":"personage","height_index":48217700001,"asset_symbol":"bty","asset_exec":"coins"}`
	acc2 := `{"address":"1G3HRSLPAKvKcTYW7KNhaWftgchj9HiwnV","exec":"","frozen":0,"balance":199700000,"total":199700000,"type":"personage","height_index":48217700001,"asset_symbol":"bty","asset_exec":"coins"}`
	acc3 := `{"address":"16htvcBNSEA7fZhAdLJphDwQRQJaHpyHTp","exec":"","frozen":0,"balance":30172247882965699,"total":30172247882965699,"type":"contract","height_index":48217700001,"asset_symbol":"bty","asset_exec":"coins"}`
	acc4 := `{"address":"1G3HRSLPAKvKcTYW7KNhaWftgchj9HiwnV","exec":"16htvcBNSEA7fZhAdLJphDwQRQJaHpyHTp","frozen":0,"balance":500000000000000,"total":500000000000000,"type":"contractInternal","height_index":48217700001,"asset_symbol":"bty","asset_exec":"coins"}`

	tx, ok := records[0].(*transaction.TxRecord)
	assert.True(t, ok)
	assert.Equal(t, false, tx.Tx.IsWithdraw)
	assert.Equal(t, txKey, tx.Key())

	feeAcc, ok := records[1].(*account.Record)
	assert.True(t, ok)
	record2, ok := records[2].(*account.Record)
	assert.True(t, ok)
	record3, ok := records[3].(*account.Record)
	assert.True(t, ok)
	record4, ok := records[4].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, db.OpAdd, record2.Op.OpType())

	assert.Equal(t, acc1, string(feeAcc.Value()))
	assert.Equal(t, acc2, string(record2.Value()))
	assert.Equal(t, "account/account/1G3HRSLPAKvKcTYW7KNhaWftgchj9HiwnV-coins-coins:bty", record2.Key())
	assert.Equal(t, account.AccountPersonage, record2.Acc.Type)
	assert.Equal(t, acc3, string(record3.Value()))
	assert.Equal(t, account.AccountContract, record3.Acc.Type)
	assert.Equal(t, acc4, string(record4.Value()))
	assert.Equal(t, account.AccountContractInternal, record4.Acc.Type)
	t.Log(record4)
	for _, r := range records {
		t.Log(string(r.Value()))
	}
}

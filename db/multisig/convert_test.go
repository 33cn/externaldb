package multisig_test

import (
	"testing"

	"github.com/33cn/externaldb/db"
	"github.com/33cn/externaldb/db/account"
	"github.com/33cn/externaldb/db/multisig"
	"github.com/33cn/externaldb/db/transaction"
	"github.com/33cn/externaldb/util"
	"github.com/stretchr/testify/assert"
)

func init() {
	util.InitChain33("local", "bty", "../../testdata/chain33.toml")
}
func Test_Create(t *testing.T) {
	blockByte := "0a83081220a12e1cfc37fdb0c757c4d4b06110d1050c67178d352083cafdbc487e62d037661a2057895e6689c00964e6cf7072f9794a00de658a9ab72017bdf85958730a7410cb22207099accf58ab7f888db69237f870af0cc5730c4d0d4957992abbc8e544ad44ce28fb0330a8a7c3ea053a9a040a067469636b657412ed02501022e80208ffff8bf8011080cab5ee011a70313271796f6361794e46374c7636433971573461767873324537553431664b5366763a3078386434663130653666313762616533636538663764303239616263623461393839616563333333386238386662333537656165663035613265326465373930343a303030303030313731332242307831643734373935396236323030393862643261323834336635376139396462633832633131643562623331396164656434633731346465613762303830393263322039ec6e86ca0990574d1e3976a62846809345aa2c4986cbc15bbc600735c4f0423a8101ba5496ad659335ee8bc8748e938db24b087db8a8f98585768a1a11b9477dfa1e9c11d30c83f26aa6331c894989455ded1f510a0efd2ac6c0f2cfbc6c736e156f04e40b3434f755a6ca578cdd17de2fccc5dd505508790c500a4532587167f85f8b2455842261153fd2df4a6557f86433a3d8884e6baf69bfb0f28297f743182c021a6e080112210320bbac09528e19c55b0f89cb37ab265e7e856b1a8c388780322dbbfd194b52ba1a473045022100d037c922feee593b9fdf197ac10449111e16c81a368b22eb53f7b82b42e3ac020220073fb3bd670f6d4c864cd3be2272db913fd800a301109ed3286581553835a90f20a08d0630ea9cf1b4a3a0f8815e3a22313668747663424e53454137665a6841644c4a706844775152514a614870794854703ac9020a086d756c746973696712940138904e0a8e010a260a22314335784b327974756f4671786d56474d63797a3958464b4657634441385433724b10140a260a22314c4447726f6b725a6a6f314874536d536e77386566336f7935566d316e6374626a100a0a260a22313271796f6361794e46374c7636433971573461767873324537553431664b536676101e100f1a120a034254591205636f696e73188094ebdc031a6e080112210320bbac09528e19c55b0f89cb37ab265e7e856b1a8c388780322dbbfd194b52ba1a473045022100ce01c3f53cdb67a7794084833e6917d4cadf12b4a658220b98b13bddbc74fb3e02205d4d91806a78ef24a9d4874d3518f163be754289376e168a95127e061d7f267c20a08d06289ea8c3ea0530a8ea8af5bca1bcd5363a22313475424550364c53484b644676793937705459525056504171696a36627465656558ffff8bf8016220e718e881c5bd12f4d8d91a488f7fc1579a3db57933b8080a69e52896b8e87f0068fb0312e80508021a5e0802125a0a2b10e0fdd4e9941a2222313271796f6361794e46374c7636433971573461767873324537553431664b536676122b10c0f0cee9941a2222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a9f010871129a010a70313271796f6361794e46374c7636433971573461767873324537553431664b5366763a3078386434663130653666313762616533636538663764303239616263623461393839616563333333386238386662333537656165663035613265326465373930343a30303030303031373133100218012222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a620805125e0a2d10808088e3aba7ca342222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1080cabdd1ada7ca342222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a870108081282010a22313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1880a48fa7a8e68611222231344b454b6259744b4b516d34774d7468534b394a344c61346e41696964476f7a741a2d1880eec495aae68611222231344b454b6259744b4b516d34774d7468534b394a344c61346e41696964476f7a741a620805125e0a2d1080cabdd1ada7ca342222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d108090c4e0aea7ca342222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a8f010808128a010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012311080e0ba84bf031880fcb5bb762222314251585336547861595947356d41446157696a344178685a5a55547077393561351a311080e0ba84bf031880c2bcca772222314251585336547861595947356d41446157696a344178685a5a555470773935613512c70208021a5e0802125a0a2b10c0f0cee9941a2222313271796f6361794e46374c7636433971573461767873324537553431664b536676122b10a0e3c8e9941a2222313271796f6361794e46374c7636433971573461767873324537553431664b5366761ae20108904e12dc010a22313271796f6361794e46374c7636433971573461767873324537553431664b53667612223338514646676a53556f7a673663476a69733663784143554a766b70665444375a531a260a22314335784b327974756f4671786d56474d63797a3958464b4657634441385433724b10141a260a22314c4447726f6b725a6a6f314874536d536e77386566336f7935566d316e6374626a100a1a260a22313271796f6361794e46374c7636433971573461767873324537553431664b536676101e22180a034254591205636f696e73188094ebdc0328a8a7c3ea05300f"
	index := int64(1)
	env, err := util.GenEnv(blockByte, index)
	assert.Nil(t, err)
	convert := multisig.NewConvert("", "bty", []string{transaction.RTransactionX, account.RAccountX, multisig.RMultiSignatureX})
	records, err := convert.ConvertTx(env, db.SeqTypeAdd)
	assert.Nil(t, err)
	assert.Equal(t, 7, len(records))

	// 预期产生 MS， MS owner， MS limit， Tx & Account fee
	txExec, txAction := "multisig", "MultiSigAccCreate"
	txKey := `transaction/transaction/0x95f8bb95d80e6a9b2f8955db6f0263db8d7e4566067225bac810ba7fd0f1afda`
	msStr := `{"create_address":"12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv","multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","tx_count":0,"required_weight":15,"type":"account"}`
	ownerStr1 := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","address":"1C5xK2ytuoFqxmVGMcyz9XFKFWcDA8T3rK","weight":20,"type":"owner"}`
	ownerStr2 := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","address":"1LDGrokrZjo1HtSmSnw8ef3oy5Vm1nctbj","weight":10,"type":"owner"}`
	ownerStr3 := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","address":"12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv","weight":30,"type":"owner"}`
	limitStr := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","symbol":"BTY","execer":"coins","daily_limit":1000000000,"spent_today":0,"last_day":1565578152,"type":"limit"}`

	for _, r := range records {
		t.Log(string(r.Value()))
	}

	// Tx
	tx, ok := records[0].(*transaction.TxRecord)
	assert.True(t, ok)
	assert.Equal(t, txExec, tx.Tx.Execer)
	assert.Equal(t, txAction, tx.Tx.ActionName)
	assert.Equal(t, false, tx.Tx.IsWithdraw)
	assert.Equal(t, txKey, tx.Key())

	// MX
	ms, ok := records[1].(*multisig.MSRecord)
	assert.True(t, ok)
	assert.Equal(t, msStr, string(ms.Value()))
	assert.Equal(t, "multisig/multisig/ms-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS", ms.Key())

	// owner
	o1, ok := records[2].(*multisig.MSUpdateOwnerRecord)
	assert.True(t, ok)
	assert.Equal(t, ownerStr1, string(o1.Value()))
	assert.Equal(t, "multisig/multisig/owner-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS-1C5xK2ytuoFqxmVGMcyz9XFKFWcDA8T3rK", o1.Key())

	o2, ok := records[3].(*multisig.MSUpdateOwnerRecord)
	assert.True(t, ok)
	assert.Equal(t, ownerStr2, string(o2.Value()))
	assert.Equal(t, "multisig/multisig/owner-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS-1LDGrokrZjo1HtSmSnw8ef3oy5Vm1nctbj", o2.Key())

	o3, ok := records[4].(*multisig.MSUpdateOwnerRecord)
	assert.True(t, ok)
	assert.Equal(t, ownerStr3, string(o3.Value()))
	assert.Equal(t, "multisig/multisig/owner-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS-12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv", o3.Key())

	// limit
	limit, ok := records[5].(*multisig.MSUpdateLimitRecord)
	assert.True(t, ok)
	assert.Equal(t, limitStr, string(limit.Value()))
	assert.Equal(t, "multisig/multisig/limit-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS-coins-BTY", limit.Key())

	// fee
}

func Test_TransferTo(t *testing.T) {
	blockByte := "0ab0071220ae2d68d4a43236333860806d620762959304d1e19fc77331e4d8efaa13bed5e01a206d09c0767c174f1c1107b1fa705e3c69bcbca53f0bde54530a6d57f6b8b73d53222086b5680fce52fa6202d0e0e8fc95fb3527d9280566c8ba105c0a045674010bd728fe0330b4a7c3ea053a9a040a067469636b657412ed02501022e80208ffff8bf8011080cab5ee011a70313271796f6361794e46374c7636433971573461767873324537553431664b5366763a3078386434663130653666313762616533636538663764303239616263623461393839616563333333386238386662333537656165663035613265326465373930343a303030303030373738362242307831643734373935396236323030393862643261323834336635376139396462633832633131643562623331396164656434633731346465613762303830393263322044aadf7ceeeb2a6b33af0aac6d88052a9a284b5f5c5c3a862f7ac3c3a646813b3a8101fe1f24fca056df91c96598b157148702674a39f7eacb5a9a6d2544bdad84b7e3853f6b0f619deacd0feb34c49f92272c0e536f6044c2f8a27c4adede62433a0804bb0b444574a16ae081158a999390520a6681f60b52892a71c88c4d25569538c6d4420f949155b61d2451d131a455dcd9f8bb7bea5df4f84e060d259bcbaf80761a6e080112210320bbac09528e19c55b0f89cb37ab265e7e856b1a8c388780322dbbfd194b52ba1a473045022100f7d008144ee255b8220bcd9d20ba8d7bfefb36ad784f8e4643248f4839cb9481022017b0d2f74c4f182f38ff0aa8c40943f5710e3f722dea1a217891b804df76eea620a08d0630a3b89ddcb48a9fbc313a22313668747663424e53454137665a6841644c4a706844775152514a614870794854703af6010a086d756c7469736967124238944e2a3d0a034254591080d0acf30e1a0574657374202205636f696e732a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a531a6e080112210320bbac09528e19c55b0f89cb37ab265e7e856b1a8c388780322dbbfd194b52ba1a47304502210093c594f943315b7023e32626971eb36e9becffb1251261ccc82f6491a9fea07802201a7694c40df9dbdc09ea932527fb48427383f034e185055f9d3901a747a0d07320a08d0628a2a8c3ea0530c4f6ddf8e5f5bac33c3a22313475424550364c53484b644676793937705459525056504171696a36627465656558ffff8bf8016220615e30627a2b0126ead71058ef22e8c964c6db13f6aa1e6c0d20359e0c0857b168fe0312e80508021a5e0802125a0a2b10c0d79e99821a2222313271796f6361794e46374c7636433971573461767873324537553431664b536676122b10a0ca9899821a2222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a9f010871129a010a70313271796f6361794e46374c7636433971573461767873324537553431664b5366763a3078386434663130653666313762616533636538663764303239616263623461393839616563333333386238386662333537656165663035613265326465373930343a30303030303037373836100218012222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a620805125e0a2d1080b0bcdbb4a7ca342222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1080faf1c9b6a7ca342222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a870108081282010a22313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d188082b0f2ade68611222231344b454b6259744b4b516d34774d7468534b394a344c61346e41696964476f7a741a2d1880cce5e0afe68611222231344b454b6259744b4b516d34774d7468534b394a344c61346e41696964476f7a741a620805125e0a2d1080faf1c9b6a7ca342222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1080c0f8d8b7a7ca342222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a8f010808128a010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012311080e0ba84bf031880cec9e8792222314251585336547861595947356d41446157696a344178685a5a55547077393561351a311080e0ba84bf03188094d0f77a2222314251585336547861595947356d41446157696a344178685a5a555470773935613512e40308021a5e0802125a0a2b10a0ca9899821a2222313271796f6361794e46374c7636433971573461767873324537553431664b536676122b1080bd9299821a2222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a80010806127c0a22313475424550364c53484b644676793937705459525056504171696a366274656565122a1080e497d0122222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a2a108094ebdc032222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a7a080612760a22313475424550364c53484b644676793937705459525056504171696a366274656565122422223338514646676a53556f7a673663476a69733663784143554a766b70665444375a531a2a1080d0acf30e22223338514646676a53556f7a673663476a69733663784143554a766b70665444375a531a80010809127c0a22313475424550364c53484b644676793937705459525056504171696a366274656565122a1080d0acf30e22223338514646676a53556f7a673663476a69733663784143554a766b70665444375a531a2a1880d0acf30e22223338514646676a53556f7a673663476a69733663784143554a766b70665444375a53"
	index := int64(1)
	env, err := util.GenEnv(blockByte, index)
	assert.Nil(t, err)

	convert := multisig.NewConvert("", "bty", []string{transaction.RTransactionX, account.RAccountX, multisig.RMultiSignatureX})
	records, err := convert.ConvertTx(env, db.SeqTypeAdd)
	assert.Nil(t, err)
	assert.Equal(t, 5, len(records))

	// 预期产生 Account From To(b->f)， Tx & Account fee
	txExec, txAction := "multisig", "MultiSigExecTransfer"
	txKey := `transaction/transaction/0xa9b4e52319d6f366e5f06bc6a2f4a75dca393519bd39b3befb668db4e0672756`
	feeStr := `{"address":"12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv","exec":"","frozen":0,"balance":893942800000,"total":893942800000,"type":"personage","height_index":51000001,"asset_symbol":"bty","asset_exec":"coins"}`
	from := `{"address":"12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv","exec":"14uBEP6LSHKdFvy97pTYRPVPAqij6bteee","frozen":0,"balance":1000000000,"total":1000000000,"type":"contractInternal","height_index":51000001,"asset_symbol":"bty","asset_exec":"coins"}`
	to1 := `{"address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","exec":"14uBEP6LSHKdFvy97pTYRPVPAqij6bteee","frozen":0,"balance":4000000000,"total":4000000000,"type":"contractInternal","height_index":51000001,"asset_symbol":"bty","asset_exec":"coins"}`
	to2 := `{"address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","exec":"14uBEP6LSHKdFvy97pTYRPVPAqij6bteee","frozen":4000000000,"balance":0,"total":4000000000,"type":"contractInternal","height_index":51000001,"asset_symbol":"bty","asset_exec":"coins"}`

	for _, r := range records {
		t.Log(string(r.Value()))
	}
	// Tx
	tx, ok := records[0].(*transaction.TxRecord)
	assert.True(t, ok)
	assert.Equal(t, txExec, tx.Tx.Execer)
	assert.Equal(t, txAction, tx.Tx.ActionName)
	assert.Equal(t, false, tx.Tx.IsWithdraw)
	assert.Equal(t, txKey, tx.Key())

	// account
	acc, ok := records[1].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, feeStr, string(acc.Value()))

	acc, ok = records[2].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, from, string(acc.Value()))

	acc, ok = records[3].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, to1, string(acc.Value()))

	acc, ok = records[4].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, to2, string(acc.Value()))
}

func Test_OwnerChange(t *testing.T) {
	blockByte := "0abe0712203fadbd4bbd3d64aef9703385e5568a5750176188a1fe52d6bf6bb5bb664145241a200d437b77c727b0d2e79159aa73ea92880a983e6a5cae8aa55f5e09f80b1dda2a2220a6912c739aff6c956b2edb4a321c2a7cf94c2679390fe83d4fb72721380c990028800430b8a7c3ea053a99040a067469636b657412ed02501022e80208ffff8bf8011080cab5ee011a70313271796f6361794e46374c7636433971573461767873324537553431664b5366763a3078386434663130653666313762616533636538663764303239616263623461393839616563333333386238386662333537656165663035613265326465373930343a3030303030303934303522423078316437343739353962363230303938626432613238343366353761393964626338326331316435626233313961646564346337313464656137623038303932633220389f4c6c2ceb1a0d955831479d325d3ec4fd2c353b3d12c76be465969897b0963a8101152365a65e1f33479ef962ec275b341f0fe0a7ddae2559d81cebed8c8a47433a312476b21c2062696eb13c34b0eb476b2a8d2e3c5a8b6ca8ab2cf098983617d404943b5453a1742f15c0233bef730b927ce6b5786ffa09ebf7b8e187cc60c75430dc102f3d618b62d6ee5f8381d4248013bbbc391ebb775fc7cdd84084be0f8c551a6d080112210320bbac09528e19c55b0f89cb37ab265e7e856b1a8c388780322dbbfd194b52ba1a46304402202993c396f871c9abf5e7c5330791727f1c9f7f48ee02195f731585d2b695f2ca022043ad3751bcf9538d98c58c5e6993eb1f72f5d82c2cfe1a987660b44532d5531c20a08d0630d2e9ccfdcf8b8288163a22313668747663424e53454137665a6841644c4a706844775152514a614870794854703a85020a086d756c7469736967125138914e124c0a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a531a22314b487758375a61644e6551446a4247706e776562346b3264716a3243577441596f200828011a6e080112210320bbac09528e19c55b0f89cb37ab265e7e856b1a8c388780322dbbfd194b52ba1a473045022100d2eff70768933f145762be60438065e3e873db5176569c3e4251b1eb4662769f0220222cfb2463f0772b19b7f25fe2dcb52cbfb36763c25451710b56281b97fe59f720a08d0628ada8c3ea0530c4edadcb99fdf6d6173a22313475424550364c53484b644676793937705459525056504171696a36627465656558ffff8bf80162207aeba4896778343f7d3569c0009fbf0ffab878671606cba1f3c9979dee53d80f68800412e80508021a5e0802125a0a2b10c0a28699821a2222313271796f6361794e46374c7636433971573461767873324537553431664b536676122b10a0958099821a2222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a9f010871129a010a70313271796f6361794e46374c7636433971573461767873324537553431664b5366763a3078386434663130653666313762616533636538663764303239616263623461393839616563333333386238386662333537656165663035613265326465373930343a30303030303039343035100218012222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a620805125e0a2d1080d0b4d6baa7ca342222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d10809aeac4bca7ca342222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a870108081282010a22313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1880969bcfb1e68611222231344b454b6259744b4b516d34774d7468534b394a344c61346e41696964476f7a741a2d1880e0d0bdb3e68611222231344b454b6259744b4b516d34774d7468534b394a344c61346e41696964476f7a741a620805125e0a2d10809aeac4bca7ca342222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1080e0f0d3bda7ca342222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a8f010808128a010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012311080e0ba84bf031880dad6867c2222314251585336547861595947356d41446157696a344178685a5a55547077393561351a311080e0ba84bf031880a0dd957d2222314251585336547861595947356d41446157696a344178685a5a555470773935613512830308021a5e0802125a0a2b10a0958099821a2222313271796f6361794e46374c7636433971573461767873324537553431664b536676122b108088fa98821a2222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a5308914e124e0a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a5312260a22314b487758375a61644e6551446a4247706e776562346b3264716a3243577441596f100818011a2b089c4e12260a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a5310011a9c01089b4e1296010a4c0a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a531a260a22313271796f6361794e46374c7636433971573461767873324537553431664b536676101e180120012a40393134663465386638323565656339643631303334653835373262633861323265633763623538653037323863646336306630396534373438616464613438643001"
	index := int64(1)
	env, err := util.GenEnv(blockByte, index)
	assert.Nil(t, err)

	convert := multisig.NewConvert("", "bty", []string{transaction.RTransactionX, account.RAccountX, multisig.RMultiSignatureX})
	records, err := convert.ConvertTx(env, db.SeqTypeAdd)
	assert.Nil(t, err)
	assert.Equal(t, 6, len(records))

	// 预期产生 Tx, owner，tx count,  Tx sig, tx list & Account fee
	txExec, txAction := "multisig", "MultiSigOwnerOperate"
	txKey := `transaction/transaction/0x914f4e8f825eec9d61034e8572bc8a22ec7cb58e0728cdc60f09e4748adda48d`
	fee := `{"address":"12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv","exec":"","frozen":0,"balance":893942400000,"total":893942400000,"type":"personage","height_index":51200001,"asset_symbol":"bty","asset_exec":"coins"}`
	owner := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","address":"1KHwX7ZadNeQDjBGpnweb4k2dqj2CWtAYo","weight":8,"type":"owner"}`
	txCount := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","tx_count":1}`
	sigTx := `{"tx_hash":"914f4e8f825eec9d61034e8572bc8a22ec7cb58e0728cdc60f09e4748adda48d","type":"owner","multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","tx_id":0,"detail":{"operate":"add","old_owner":"","new_owner":"1KHwX7ZadNeQDjBGpnweb4k2dqj2CWtAYo","new_weight":8}}`
	sigList := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","tx_id":0,"address":"12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv","weight":30,"creator":true,"executed":true,"tx_hash":"0x914f4e8f825eec9d61034e8572bc8a22ec7cb58e0728cdc60f09e4748adda48d"}`

	for _, r := range records {
		t.Log(string(r.Value()))
	}

	// Tx
	tx, ok := records[0].(*transaction.TxRecord)
	assert.True(t, ok)
	assert.Equal(t, txExec, tx.Tx.Execer)
	assert.Equal(t, txAction, tx.Tx.ActionName)
	assert.Equal(t, false, tx.Tx.IsWithdraw)
	assert.Equal(t, txKey, tx.Key())

	// fee
	acc, ok := records[1].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, fee, string(acc.Value()))

	// owner
	ownerRec, ok := records[2].(*multisig.MSUpdateOwnerRecord)
	assert.True(t, ok)
	assert.Equal(t, owner, string(ownerRec.Value()))
	assert.Equal(t, "multisig/multisig/owner-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS-1KHwX7ZadNeQDjBGpnweb4k2dqj2CWtAYo", ownerRec.Key())

	// tx count
	cnt, ok := records[3].(*multisig.MSUpdateTxCountRecord)
	assert.True(t, ok)
	assert.Equal(t, txCount, string(cnt.Value()))
	assert.Equal(t, "multisig/multisig/ms-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS", cnt.Key())

	// tx sig/list
	sig, ok := records[4].(*multisig.SigTxRecord)
	assert.True(t, ok)
	assert.Equal(t, sigTx, string(sig.Value()))
	assert.Equal(t, "sig_tx/sig_tx/tx-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000000", sig.Key())
	assert.Equal(t, "tx-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000000", sig.ID())

	list, ok := records[5].(*multisig.SigListRecord)
	assert.True(t, ok)
	assert.Equal(t, sigList, string(list.Value()))
	assert.Equal(t, "sig_list/sig_list/sig_list-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000000:12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv", list.Key())
}

func Test_LimitChange(t *testing.T) {
	blockByte := "0aaa071220aa23c0671d4f0660fd04d87d9fbad2fe02b9cfe1c3814c02df9cc56cda15c1671a20d487ca41cf699bc45a6731d94a30536583e850b9ad4b7d6c47d5a345391ac9992220b032ebe92b793cc8407c6cc80d60e59c8f00830f91b27fc7ce6883573212624a28840430c4a7c3ea053a99040a067469636b657412ed02501022e80208ffff8bf8011080cab5ee011a70313271796f6361794e46374c7636433971573461767873324537553431664b5366763a3078386434663130653666313762616533636538663764303239616263623461393839616563333333386238386662333537656165663035613265326465373930343a303030303030323430352242307831643734373935396236323030393862643261323834336635376139396462633832633131643562623331396164656434633731346465613762303830393263322028135189facc9dd27d7bf885f250fd99e2418a6932b5a3420aed3078358685383a81016f31282f4ba2e101257599e73032e4d29d70bfd90e1e5434aa0950e35d8ee2ec7f0e98816a27ce962d1b5e2a5f9261ef0eff448a4a8144509a826311f16fbe3a04458b6e27f8f2ea369bdd73461b095d3abad1ac8370d1b7aa4769c8298f12dd6eed393da8f086a3304400b9cef0531126473bd605414eb0740e5a70cedbac6c261a6d080112210320bbac09528e19c55b0f89cb37ab265e7e856b1a8c388780322dbbfd194b52ba1a463044022056bbbd120ac07dbf87f0f247f72e32e48fec2b215b3a4543ed0b1f713b31d5250220726b866f3a1f37d656e6d55d513486efc09a7b6689db7bde3afd5c32252f13be20a08d0630a7c6a28cc894cc825c3a22313668747663424e53454137665a6841644c4a706844775152514a614870794854703af1010a086d756c7469736967123d38924e1a380a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a5312120a034254591205636f696e731880989abc041a6e080112210320bbac09528e19c55b0f89cb37ab265e7e856b1a8c388780322dbbfd194b52ba1a473045022100c783fc789a6d686da4079b6e890aba4ac5d8ceb752d86bf594ca0834e66e2a2102206011a68c6e89bfc206a063cc3390d20188a70ddb8b2b6418ed21cafa99ffb60520a08d0628b9a8c3ea0530af8df094959c9dd54c3a22313475424550364c53484b644676793937705459525056504171696a36627465656558ffff8bf801622084c3e1b84bf1ed969be1e043722a5149fe49a1b5c14ce053aad786384de9cfef68840412ea0508021a5e0802125a0a2b10c0b8d598821a2222313271796f6361794e46374c7636433971573461767873324537553431664b536676122b10a0abcf98821a2222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a9f010871129a010a70313271796f6361794e46374c7636433971573461767873324537553431664b5366763a3078386434663130653666313762616533636538663764303239616263623461393839616563333333386238386662333537656165663035613265326465373930343a30303030303032343035100218012222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a620805125e0a2d108090a5ccc6a7ca342222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1080dadabac8a7ca342222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a870108081282010a22313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1880bef188b9e68611222231344b454b6259744b4b516d34774d7468534b394a344c61346e41696964476f7a741a2d188088a7f7bae68611222231344b454b6259744b4b516d34774d7468534b394a344c61346e41696964476f7a741a620805125e0a2d1080dadabac8a7ca342222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1080a0e1c9c9a7ca342222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a91010808128c010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012321080e0ba84bf031880f2f0c280012222314251585336547861595947356d41446157696a344178685a5a55547077393561351a321080e0ba84bf031880b8f7d181012222314251585336547861595947356d41446157696a344178685a5a5554707739356135128f0308021a5e0802125a0a2b10a0abcf98821a2222313271796f6361794e46374c7636433971573461767873324537553431664b536676122b10809ec998821a2222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a5d08974e12580a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a5312180a034254591205636f696e73188094ebdc0328a8a7c3ea051a180a034254591205636f696e731880989abc0428a8a7c3ea051a2b089c4e12260a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a5310051a9e01089b4e1298010a4e0a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a5310041a260a22313271796f6361794e46374c7636433971573461767873324537553431664b536676101e180120012a40323734363163656362623734616434303938313036626663663161623633353035646435616334666534333637643032363939363533613262353365633031383002"
	index := int64(1)
	env, err := util.GenEnv(blockByte, index)

	convert := multisig.NewConvert("", "bty", []string{transaction.RTransactionX, account.RAccountX, multisig.RMultiSignatureX})
	records, err := convert.ConvertTx(env, db.SeqTypeAdd)
	assert.Nil(t, err)
	assert.Equal(t, 6, len(records))

	// 预期产生 Tx, limit，tx count,  Tx sig, tx list & Account fee
	txExec, txAction := "multisig", "MultiSigAccOperate"
	txKey := `transaction/transaction/0x27461cecbb74ad4098106bfcf1ab63505dd5ac4fe4367d02699653a2b53ec018`
	fee := `{"address":"12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv","exec":"","frozen":0,"balance":893941600000,"total":893941600000,"type":"personage","height_index":51600001,"asset_symbol":"bty","asset_exec":"coins"}`
	limit := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","symbol":"BTY","execer":"coins","daily_limit":1200000000,"spent_today":0,"last_day":1565578152,"type":"limit"}`
	txCount := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","tx_count":5}`
	sigTx := `{"tx_hash":"27461cecbb74ad4098106bfcf1ab63505dd5ac4fe4367d02699653a2b53ec018","type":"account","multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","tx_id":4,"detail":{"dailyLimit":{"symbol":"BTY","execer":"coins","daily_limit":1200000000},"operate":"limit_operate"}}`
	sigList := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","tx_id":4,"address":"12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv","weight":30,"creator":true,"executed":true,"tx_hash":"0x27461cecbb74ad4098106bfcf1ab63505dd5ac4fe4367d02699653a2b53ec018"}`

	for _, r := range records {
		t.Log(string(r.Value()))
	}

	// Tx
	tx, ok := records[0].(*transaction.TxRecord)
	assert.True(t, ok)
	assert.Equal(t, txExec, tx.Tx.Execer)
	assert.Equal(t, txAction, tx.Tx.ActionName)
	assert.Equal(t, false, tx.Tx.IsWithdraw)
	assert.Equal(t, txKey, tx.Key())

	// fee
	acc, ok := records[1].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, fee, string(acc.Value()))

	// limit
	limitRec, ok := records[2].(*multisig.MSUpdateLimitRecord)
	assert.True(t, ok)
	assert.Equal(t, limit, string(limitRec.Value()))
	assert.Equal(t, "multisig/multisig/limit-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS-coins-BTY", limitRec.Key())

	// tx count
	cnt, ok := records[3].(*multisig.MSUpdateTxCountRecord)
	assert.True(t, ok)
	assert.Equal(t, txCount, string(cnt.Value()))
	assert.Equal(t, "multisig/multisig/ms-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS", cnt.Key())

	// tx sig/list
	sig, ok := records[4].(*multisig.SigTxRecord)
	assert.True(t, ok)
	assert.Equal(t, sigTx, string(sig.Value()))
	assert.Equal(t, "sig_tx/sig_tx/tx-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000004", sig.Key())
	assert.Equal(t, "tx-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000004", sig.ID())

	list, ok := records[5].(*multisig.SigListRecord)
	assert.True(t, ok)
	assert.Equal(t, sigList, string(list.Value()))
	assert.Equal(t, "sig_list/sig_list/sig_list-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000004:12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv", list.Key())
	assert.Equal(t, "sig_list-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000004:12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv", list.ID())
}

func Test_TransferFrom(t *testing.T) {
	blockByte := "0ad407122038d8abe2dd21d88d277cec32d8d54ce8a8b2bff3152409b7bbd239c296185ec41a208491ae33a6726c8ddd856c0b07b66e09fec1a5f234d6a8eb0add69e937cc8a8422201fa5da4102feea825ee6f0ba0216f9bfc06cb8d96598329d3e00f47bcfe0530628e80430ebaac3ea053a9a040a067469636b657412ed02501022e80208d4ca84f8011080cab5ee011a70313271796f6361794e46374c7636433971573461767873324537553431664b5366763a3078386434663130653666313762616533636538663764303239616263623461393839616563333333386238386662333537656165663035613265326465373930343a3030303030303131313522423078653164343435373336336263376138653965343032383933626139323539333966326131313561353964653562333935363131373834366332333535633133393220707ebcab561e12507894e3c9a186ee471bca3a498bc47f3fc39e4c957f1e9f913a81018bd951cc88993c87bccd4309119d0d354848ed67b3a61d1a0161e88e39173934c82cbf798adc4ba58b9d0cf2ad8e64742f8b66a3f193d479c5b8bd32a139cfe4044645a3eb1b259336cc6c7f169ab925ef21ca3a20617f8bfe6e8ea2e10acff89d04e76220b428770630c2b30a952629b39e2f53e53a6f661610cc8611cd3714481a6e080112210320bbac09528e19c55b0f89cb37ab265e7e856b1a8c388780322dbbfd194b52ba1a473045022100dc597c80aefd51bf63c2040734e74f0e1f04445bc529495991917f9f58d7614902203d0c5070deede20169bea9b35baace2b5e724bd4647b4780e3c0b9e81584560120a08d0630eeda9787a2e1adf5553a22313668747663424e53454137665a6841644c4a706844775152514a614870794854703a9a020a086d756c7469736967126638954e32610a034254591080a8d6b9071a0574657374202205636f696e732a22314c4447726f6b725a6a6f314874536d536e77386566336f7935566d316e6374626a32223338514646676a53556f7a673663476a69733663784143554a766b70665444375a531a6e080112210320bbac09528e19c55b0f89cb37ab265e7e856b1a8c388780322dbbfd194b52ba1a473045022100f99acc3b529ba10c0fb4236c742a62973126e46e793e56437c3db762d326b2c10220055a1a7ab153cf39bfe6b07d136698788e925ff1e38af92befe568d88e24d8bd20a08d0628ddabc3ea0530b29dfd8d89b3a8d71f3a22313475424550364c53484b644676793937705459525056504171696a36627465656558d4ca84f8016220cb7f477137ca624aa5112e17e51fea5c85486b2fb7a3d589736f23899d972bd568e80412e80508021a5e0802125a0a2b10a0f291c2ef192222313271796f6361794e46374c7636433971573461767873324537553431664b536676122b1080e58bc2ef192222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a9f010871129a010a70313271796f6361794e46374c7636433971573461767873324537553431664b5366763a3078386434663130653666313762616533636538663764303239616263623461393839616563333333386238386662333537656165663035613265326465373930343a30303030303031313135100218012222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a620805125e0a2d1080dc91c082c79a342222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1080a6c7ae84c79a342222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a870108081282010a22313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1880b2cf9b8585d710222231344b454b6259744b4b516d34774d7468534b394a344c61346e41696964476f7a741a2d1880fc848a8785d710222231344b454b6259744b4b516d34774d7468534b394a344c61346e41696964476f7a741a620805125e0a2d1080a6c7ae84c79a342222313668747663424e53454137665a6841644c4a706844775152514a61487079485470122d1080eccdbd85c79a342222313668747663424e53454137665a6841644c4a706844775152514a614870794854701a8f010808128a010a22313668747663424e53454137665a6841644c4a706844775152514a6148707948547012311080cc99dda9051880dea0cb052222314251585336547861595947356d41446157696a344178685a5a55547077393561351a311080cc99dda9051880a4a7da062222314251585336547861595947356d41446157696a344178685a5a5554707739356135128e0508021a5e0802125a0a2b1080e58bc2ef192222313271796f6361794e46374c7636433971573461767873324537553431664b536676122b10e0d785c2ef192222313271796f6361794e46374c7636433971573461767873324537553431664b5366761a80010806127c0a22313475424550364c53484b644676793937705459525056504171696a366274656565122a1880a0d9e61d22223338514646676a53556f7a673663476a69733663784143554a766b70665444375a531a2a1880f882ad1622223338514646676a53556f7a673663476a69733663784143554a766b70665444375a531a7a080612760a22313475424550364c53484b644676793937705459525056504171696a36627465656512242222314c4447726f6b725a6a6f314874536d536e77386566336f7935566d316e6374626a1a2a1080a8d6b9072222314c4447726f6b725a6a6f314874536d536e77386566336f7935566d316e6374626a1a2b089c4e12260a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a5310081a5d089a4e12580a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a5312180a034254591205636f696e731880989abc0428a8a7c3ea051a180a034254591205636f696e731880989abc0428a8a7c3ea051a9e01089b4e1298010a4e0a223338514646676a53556f7a673663476a69733663784143554a766b70665444375a5310071a260a22313271796f6361794e46374c7636433971573461767873324537553431664b536676101e180120012a40353437336132613338616538633961663661633635636135666635393163326363356137363064343137336165333862636439313739646638623536656433653003"
	index := int64(1)
	env, err := util.GenEnv(blockByte, index)

	convert := multisig.NewConvert("", "bty", []string{transaction.RTransactionX, account.RAccountX, multisig.RMultiSignatureX})
	records, err := convert.ConvertTx(env, db.SeqTypeAdd)
	assert.Nil(t, err)
	assert.Equal(t, 8, len(records))

	// 预期产生 Tx, fee From To，tx count,  Limit, Tx sig, tx list
	txExec, txAction := "multisig", "MultiSigAccExecTransfer"
	txKey := `transaction/transaction/0x5473a2a38ae8c9af6ac65ca5ff591c2cc5a760d4173ae38bcd9179df8b56ed3e`
	fee := `{"address":"12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv","exec":"","frozen":0,"balance":888928300000,"total":888928300000,"type":"personage","height_index":61600001,"asset_symbol":"bty","asset_exec":"coins"}`
	from := `{"address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","exec":"14uBEP6LSHKdFvy97pTYRPVPAqij6bteee","frozen":6000000000,"balance":0,"total":6000000000,"type":"contractInternal","height_index":61600001,"asset_symbol":"bty","asset_exec":"coins"}`
	to := `{"address":"1LDGrokrZjo1HtSmSnw8ef3oy5Vm1nctbj","exec":"14uBEP6LSHKdFvy97pTYRPVPAqij6bteee","frozen":0,"balance":2000000000,"total":2000000000,"type":"contractInternal","height_index":61600001,"asset_symbol":"bty","asset_exec":"coins"}`
	limit := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","symbol":"BTY","execer":"coins","daily_limit":1200000000,"spent_today":0,"last_day":1565578152,"type":"limit"}`
	txCount := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","tx_count":8}`
	sigTx := `{"tx_hash":"5473a2a38ae8c9af6ac65ca5ff591c2cc5a760d4173ae38bcd9179df8b56ed3e","type":"transfer","multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","tx_id":7,"detail":{"symbol":"BTY","amount":2000000000,"note":"test ","execname":"coins","to":"1LDGrokrZjo1HtSmSnw8ef3oy5Vm1nctbj","from":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS"}}`
	sigList := `{"multi_signature_address":"38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS","tx_id":7,"address":"12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv","weight":30,"creator":true,"executed":true,"tx_hash":"0x5473a2a38ae8c9af6ac65ca5ff591c2cc5a760d4173ae38bcd9179df8b56ed3e"}`

	for _, r := range records {
		t.Log(string(r.Value()))
	}

	// Tx
	tx, ok := records[0].(*transaction.TxRecord)
	assert.True(t, ok)
	assert.Equal(t, txExec, tx.Tx.Execer)
	assert.Equal(t, txAction, tx.Tx.ActionName)
	assert.Equal(t, false, tx.Tx.IsWithdraw)
	assert.Equal(t, txKey, tx.Key())

	// fee
	acc, ok := records[1].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, fee, string(acc.Value()))

	acc, ok = records[2].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, from, string(acc.Value()))

	acc, ok = records[3].(*account.Record)
	assert.True(t, ok)
	assert.Equal(t, to, string(acc.Value()))

	// tx count
	cnt, ok := records[4].(*multisig.MSUpdateTxCountRecord)
	assert.True(t, ok)
	assert.Equal(t, txCount, string(cnt.Value()))
	assert.Equal(t, "multisig/multisig/ms-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS", cnt.Key())

	// limit
	limitRec, ok := records[5].(*multisig.MSUpdateLimitRecord)
	assert.True(t, ok)
	assert.Equal(t, limit, string(limitRec.Value()))
	assert.Equal(t, "multisig/multisig/limit-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS-coins-BTY", limitRec.Key())

	// tx sig/list
	sig, ok := records[6].(*multisig.SigTxRecord)
	assert.True(t, ok)
	assert.Equal(t, sigTx, string(sig.Value()))
	assert.Equal(t, "sig_tx/sig_tx/tx-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000007", sig.Key())
	assert.Equal(t, "tx-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000007", sig.ID())

	list, ok := records[7].(*multisig.SigListRecord)
	assert.True(t, ok)
	assert.Equal(t, sigList, string(list.Value()))
	assert.Equal(t, "sig_list/sig_list/sig_list-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000007:12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv", list.Key())
	assert.Equal(t, "sig_list-38QFFgjSUozg6cGjis6cxACUJvkpfTD7ZS:00000007:12qyocayNF7Lv6C9qW4avxs2E7U41fKSfv", list.ID())
}
